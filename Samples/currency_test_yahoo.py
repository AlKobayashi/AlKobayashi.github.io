# -*- coding: utf-8 -*-
"""currency_test_yahoo

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oAB8tCVh-tCyq5m1M5NO0klbkHTN9B00
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()
import numpy as np
import pandas as pd

"""**Loading financial data into pandas**"""

!pip install yfinance

import yfinance as yf

EURUSD = yf.Ticker("EUR=X").history(period='5d', interval='1m')

"""Now we have downloaded the data.

The responses returned are _pandas_ `DataFrames`. They contain [OHLC](https://www.investopedia.com/terms/o/ohlcchart.asp) data, but we only need the `Close` columns this time. Let us also give them names.
"""

EURUSD

"""Create a for-loop:"""

dfs=[] #create empty list of dataframes
for x in ['EUR=X']:
  df = yf.Ticker(x).history(period='5d', interval='1m')
  df=df[['Close']]
  df['Name']=x
  dfs.append(df) #append newly download and formatted dataframe to our list of dtaaframes

"""Great. Now we have a list of `DataFrame`s, each containing the closing stock price and the stock name, for the past 5 days, minute-by-minute.

### Concatenation

We can combine `DataFrames` by stacking them on top of each other using `concat`. They must have the same `column` names (otherwise, empty columns will be created and filled with `NaN`s). The `pd.concat` function accepts only `list []` arguments - therefore, the `DataFrame`s to be combined have to be in the format `[dfA, dfB]`.
"""

pd.concat(dfs)

"""Loop"""

dfz = pd.DataFrame()  # initialize empty DataFrame
for x in dfs:
    stock_name = x['Name'].values[0]
    stock_name = stock_name.replace('.', '')
    x = x[['Close']]
    x.index = pd.to_datetime(x.index)  # Convert the index to datetime
    x.columns = [stock_name]
    dfz = x.join(dfz, how='outer')

print(dfz)

dfz.to_csv('pset2HIGHFREQ.csv')

"""Save csv file to GitHub. Create a chart in Vega Lite, and pull data from Git. Save chart as a json file in Visual Code Studio and then in Git.

We can extend the code by fetching multiple rates against the USD into one csv to show for a single graph.
"""

EURUSD = yf.Ticker("EUR=X").history(period='5d', interval='5m')
GBPUSD = yf.Ticker("GBPUSD=X").history(period='5d', interval='5m')
JPYUSD = yf.Ticker("JPYUSD=X").history(period='5d', interval='5m')
CHFUSD = yf.Ticker("CHFUSD=X").history(period='5d', interval='5m')

dfs=[] #create empty list of dataframes
for x in ['EUR=X','GBPUSD=X','JPYUSD=X','CHFUSD=X']:
  df = yf.Ticker(x).history(period='5d', interval='5m')
  df=df[['Close']]
  df['Name']=x
  dfs.append(df) #append newly download and formatted dataframe to our list of dtaaframes

pd.concat(dfs)

dfz = pd.DataFrame()  # initialize empty DataFrame
for x in dfs:
    stock_name = x['Name'].values[0]
    stock_name = stock_name.replace('.', '')
    x = x[['Close']]
    x.index = pd.to_datetime(x.index)  # Convert the index to datetime
    x.columns = [stock_name]
    dfz = x.join(dfz, how='outer')

print(dfz)

dfz.to_csv('pset2_multipleHIGHFREQ.csv')