# -*- coding: utf-8 -*-
"""Perfect Clustering Template

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uHrCr78edpDvjePPfXSIKtD2Byphmhoc

**Time-series: Hiearchical clustering**
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()
import numpy as np
import pandas as pd

"""**Loading financial data into pandas**"""

!pip install yfinance

import yfinance as yf

EUR_DKK = yf.Ticker("EURDKK=X").history(period='5y')
EUR_NOK = yf.Ticker("EURNOK=X").history(period='5y')
EUR_SEK = yf.Ticker("EURSEK=X").history(period='5y')
EUR_PLN = yf.Ticker("EURPLN=X").history(period='5y')
EUR_GBP = yf.Ticker("EURGBP=X").history(period='5y')
EUR_USD = yf.Ticker("EURUSD=X").history(period='5y')
EUR_JPY = yf.Ticker("EURJPY=X").history(period='5y')
EUR_CNY = yf.Ticker("EURCNY=X").history(period='5y')
EUR_CHF = yf.Ticker("EURCHF=X").history(period='5y')
EUR_RUB = yf.Ticker("EURRUB=X").history(period='5y')

"""Now we have downloaded the data. **NOTE: there are 10 tickers.**

The responses returned are _pandas_ `DataFrames`. They contain [OHLC](https://www.investopedia.com/terms/o/ohlcchart.asp) data, but we only need the `Close` columns this time. Let us also give them names.
"""

EUR_DKK

"""Create a for-loop:"""

dfs=[] #create empty list of dataframes
for x in ['EURDKK=X','EURNOK=X','EURSEK=X','EURPLN=X','EURGBP=X','EURUSD=X','EURJPY=X','EURCNY=X','EURCHF=X','EURRUB=X']:
  df = yf.Ticker(x).history(period='5y')
  df=df[['Close']]
  df['Name']=x
  dfs.append(df) #append newly download and formatted dataframe to our list of dtaaframes

"""Great. Now we have a list of `DataFrame`s, each containing the closing stock price and the stock name, for the past 5 years.

### Concatenation

We can combine `DataFrames` by stacking them on top of each other using `concat`. They must have the same `column` names (otherwise, empty columns will be created and filled with `NaN`s). The `pd.concat` function accepts only `list []` arguments - therefore, the `DataFrame`s to be combined have to be in the format `[dfA, dfB]`.
"""

pd.concat(dfs)

"""Loop"""

dfz=pd.DataFrame() #initialise empty DataFrame
for x in dfs:
  if not x['Name'].empty:
    stock_name = x['Name'].values[0]
    stock_name = stock_name.replace('.', '')
    x = x[['Close']]
    x.index = x.index.astype(str).str[:10]
    x.columns = [stock_name]
    dfz = pd.merge(dfz, x, how='outer', left_index=True, right_index=True)

print(dfz)

dfz.to_csv('currencies.csv')

"""## Clustering of time-series data

"""

import scipy.cluster.hierarchy as sch

"""I koden nedanför ser du på rad 2: for x in stocks.columns[1:11]: Kom ihåg att det är för 10 tickers."""

stocks=pd.read_csv('currencies.csv').dropna()
for x in stocks.columns[1:11]:
  stocks[x+'_z_norm']= (stocks[x] - stocks[x].mean())/stocks[x].std()
stock_stack=stocks.set_index('Date').stack().reset_index()
stock_stack.columns=['Date','Stock','Value']
stock_stack['Date']=pd.to_datetime(stock_stack['Date'])
stock_stack=stock_stack[stock_stack['Stock'].str.contains('z_norm')]
stock_stack.head()

"""Kom ihåg att timeSeries.columns=[i[:10] for i in timeSeries.columns] är för 10 tickers."""

timeSeries=stock_stack.set_index(['Date','Stock']).unstack()['Value']
timeSeries.columns=[i[:10] for i in timeSeries.columns]

timeSeries.plot()

timeSeries.plot()

# Ensure each column has a label
plt.legend(loc='upper right')

plt.show()

Z = sch.linkage(timeSeries.T, method='ward', metric='euclidean')

# Plot dendogram
plt.figure(figsize=(10, 5))
plt.title('Hierarchical Clustering Dendrogram: EURO Currency pairs')
plt.xlabel('Sample index')
plt.ylabel('Distance')
sch.dendrogram(
    Z,
    leaf_rotation=90.,  # rotates the x axis labels
    leaf_font_size=14.,  # font size for the x axis labels
    labels=timeSeries.columns
)
plt.show()

"""vertical distance represents the degree of similarity. The closer the branches are to the bottom of the diagram the more similar the stocks behave. [FIN GRAF, FÖRSÖK REPLICERA?]

### Dynamic Time Warping
"""

import numpy as np

"""Kom ihåg att rad 1: x=[i/10.0 for i in range(100)] är för 10 tickers."""

x=[i/10.0 for i in range(100)]
y=[np.sin(i)+(np.random.uniform()-0.5)*0.3 for i in x]
y2=[np.sin(i+1)+(np.random.uniform()-0.5)*0.3 for i in x]
y3=[np.random.uniform()-0.5 for i in x]
df=pd.DataFrame([y,y2,y3],index=['y','y2','y3']).T
df.plot()

Z = sch.linkage(df.T, method='ward', metric='euclidean')

# Plot dendogram
plt.figure(figsize=(4, 4))
plt.title('Hierarchical Clustering Dendrogram')
plt.xlabel('Sample index')
plt.ylabel('Distance')
sch.dendrogram(
    Z,
    leaf_rotation=90.,  # rotates the x axis labels
    leaf_font_size=16.,  # font size for the x axis labels
    labels=df.columns
)
plt.show()

!pip install dtaidistance

from dtaidistance import dtw

from dtaidistance import dtw
from dtaidistance import dtw_visualisation as dtwvis
import numpy as np
path = dtw.warping_path(y, y2)
dtwvis.plot_warping(y, y2, path)

from dtaidistance import clustering
model = clustering.LinkageTree(dtw.distance_matrix_fast, {})
cluster_idx = model.fit(np.array(df.T))

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 10))
model.plot(axes=ax, show_ts_label=df.columns,
           show_tr_label=True, ts_label_margin=-10,
           ts_left_margin=10, ts_sample_length=1)

cluster_idx = model.fit(np.array(timeSeries.T))

"""[EXEMPEL SLUT]"""

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 4)) #10 står för längd.
model.plot(axes=ax, show_ts_label=timeSeries.columns,
           show_tr_label=True, ts_label_margin=-10,
           ts_left_margin=10, ts_sample_length=1)
